/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace vehicle
{
    public sealed class mesh_t : LCM.LCM.LCMEncodable
    {
        public int num_vertices;
        public vehicle.vector3_t[] vertices;
        public int num_triangles;
        public vehicle.mesh_triangle_t[] triangles;
 
        public mesh_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x947ceff0a3cd63b5L;
 
        static mesh_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("vehicle.mesh_t"))
                return 0L;
 
            classes.Add("vehicle.mesh_t");
            ulong hash = LCM_FINGERPRINT_BASE
                 + vehicle.vector3_t._hashRecursive(classes)
                 + vehicle.mesh_triangle_t._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.num_vertices); 
 
            for (int a = 0; a < this.num_vertices; a++) {
                this.vertices[a]._encodeRecursive(outs); 
            }
 
            outs.Write(this.num_triangles); 
 
            for (int a = 0; a < this.num_triangles; a++) {
                this.triangles[a]._encodeRecursive(outs); 
            }
 
        }
 
        public mesh_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public mesh_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static vehicle.mesh_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            vehicle.mesh_t o = new vehicle.mesh_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.num_vertices = ins.ReadInt32();
 
            this.vertices = new vehicle.vector3_t[(int) num_vertices];
            for (int a = 0; a < this.num_vertices; a++) {
                this.vertices[a] = vehicle.vector3_t._decodeRecursiveFactory(ins);
            }
 
            this.num_triangles = ins.ReadInt32();
 
            this.triangles = new vehicle.mesh_triangle_t[(int) num_triangles];
            for (int a = 0; a < this.num_triangles; a++) {
                this.triangles[a] = vehicle.mesh_triangle_t._decodeRecursiveFactory(ins);
            }
 
        }
 
        public vehicle.mesh_t Copy()
        {
            vehicle.mesh_t outobj = new vehicle.mesh_t();
            outobj.num_vertices = this.num_vertices;
 
            outobj.vertices = new vehicle.vector3_t[(int) num_vertices];
            for (int a = 0; a < this.num_vertices; a++) {
                outobj.vertices[a] = this.vertices[a].Copy();
            }
 
            outobj.num_triangles = this.num_triangles;
 
            outobj.triangles = new vehicle.mesh_triangle_t[(int) num_triangles];
            for (int a = 0; a < this.num_triangles; a++) {
                outobj.triangles[a] = this.triangles[a].Copy();
            }
 
            return outobj;
        }
    }
}


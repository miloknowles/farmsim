/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace vehicle
{
    public sealed class range_measurement_t : LCM.LCM.LCMEncodable
    {
        public vehicle.header_t header;
        public double range;
        public vehicle.point3_t point;
 
        public range_measurement_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x6f94f72760f8d4e6L;
 
        static range_measurement_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("vehicle.range_measurement_t"))
                return 0L;
 
            classes.Add("vehicle.range_measurement_t");
            ulong hash = LCM_FINGERPRINT_BASE
                 + vehicle.header_t._hashRecursive(classes)
                 + vehicle.point3_t._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            this.header._encodeRecursive(outs); 
 
            outs.Write(this.range); 
 
            this.point._encodeRecursive(outs); 
 
        }
 
        public range_measurement_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public range_measurement_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static vehicle.range_measurement_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            vehicle.range_measurement_t o = new vehicle.range_measurement_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.header = vehicle.header_t._decodeRecursiveFactory(ins);
 
            this.range = ins.ReadDouble();
 
            this.point = vehicle.point3_t._decodeRecursiveFactory(ins);
 
        }
 
        public vehicle.range_measurement_t Copy()
        {
            vehicle.range_measurement_t outobj = new vehicle.range_measurement_t();
            outobj.header = this.header.Copy();
 
            outobj.range = this.range;
 
            outobj.point = this.point.Copy();
 
            return outobj;
        }
    }
}

